# -*- coding: utf-8 -*-
"""Veri ön işleme2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kJXP-sDY9IkcOppZM1QhiuzvXxfbOhR5
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('train.csv')

print("Verinin ilk 5 satırı:")
print(df.head())
print("\n" + "-" * 30)

df.info()
print("\n" + "-" * 30)

print("Her sütundaki eksik değer sayısı:")
print(df.isnull().sum())
print("\n" + "-" * 30)

most_frequent_port = df['Embarked'].mode()[0]
df['Embarked'].fillna(most_frequent_port, inplace=True)
print(f"\n'Embarked' sütunundaki 2 eksik değer '{most_frequent_port}' ile dolduruldu.")

df['Age'] = df.groupby(['Pclass', 'Sex'])['Age'].transform(lambda x: x.fillna(x.median()))
print("'Age' sütunundaki 177 eksik değer, Pclass ve Sex gruplarının medyan yaşı ile dolduruldu.")

df['Has_Cabin'] = np.where(df['Cabin'].isnull(), 0, 1)
print("'Has_Cabin' adında yeni bir sütun oluşturuldu (1: Kabin Var, 0: Kabin Yok).")

df.drop('Cabin', axis=1, inplace=True)
print("Orijinal 'Cabin' sütunu veri setinden kaldırıldı.")

print(df.isnull().sum())

df['Sex'] = df['Sex'].map({'male': 0, 'female': 1}).astype(int)
print("'Sex' sütunu sayısal formata çevrildi (male: 0, female: 1).")

df = pd.get_dummies(df, columns=['Embarked'], prefix='Embarked')
print("'Embarked' sütununa One-Hot Encoding uygulandı.")
print("-" * 50)

print("\nGereksiz sütunlar kaldırılıyor: 'PassengerId', 'Name', 'Ticket'")
df.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)
print("-" * 50)

df.info()

y = df['Survived']
X = df.drop('Survived', axis=1)
print(f"Özellik (X) matrisinin boyutu: {X.shape}")
print(f"Hedef (y) vektörünün boyutu: {y.shape}")
print("-" * 50)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

print("Veri, eğitim ve test setlerine ayrıldı:")
print(f"Eğitim seti boyutu: {X_train.shape[0]} satır")
print(f"Test seti boyutu: {X_test.shape[0]} satır")
print("-" * 50)

# y değişkeni zaten 'Survived' sütununu içeriyor.
# Her bir sınıftan kaç kişi olduğunu sayalım:
print("Hayatta Kalma Dağılımı:")
print(y.value_counts())

print("\nHayatta Kalma Yüzdelik Dağılımı:")
print(y.value_counts(normalize=True))

# --- ADIM 4: SAYISAL ÖZELLİKLERİ ÖLÇEKLENDİRME (FEATURE SCALING) ---
print("\nSayısal özellikler ölçeklendiriliyor...")

# StandardScaler nesnesini oluşturuyoruz.
scaler = StandardScaler()

# Scaler'ı SADECE eğitim verisi üzerinde eğitiyoruz (fit) ve dönüştürüyoruz (transform).
# Bu, test verisinden bilgi sızıntısını önler.
X_train_scaled = scaler.fit_transform(X_train)

# Scaler'ı test verisi üzerinde SADECE dönüştürüyoruz (transform).
# Test verisini, eğitim verisinin istatistiklerine göre ölçeklendiririz.
X_test_scaled = scaler.transform(X_test)

# Ölçeklendirilmiş veriler artık NumPy dizisidir. İsterseniz tekrar DataFrame'e çevirebiliriz.
X_train_scaled = pd.DataFrame(X_train_scaled, columns=X.columns)
X_test_scaled = pd.DataFrame(X_test_scaled, columns=X.columns)

print("Ölçeklendirme tamamlandı!")
print("\nÖlçeklendirilmiş Eğitim Verisi (X_train_scaled) ilk 5 satır:")
print(X_train_scaled.head())

print("\nÖlçeklendirilmiş Test Verisi (X_test_scaled) ilk 5 satır:")
print(X_test_scaled.head())

plt.figure(figsize=(6, 4))
sns.countplot(x=y)
plt.title('Hayatta Kalma Dağılımı (0 = Kalamadı, 1 = Kaldı)')
plt.xlabel('Hayatta Kalma Durumu')
plt.ylabel('Kişi Sayısı')
plt.show()

print("\nGörsel Yöntem: Box Plot ile aykırı değerlerin tespiti...")

# Aykırı değer olabilecek sürekli sayısal sütunları seçelim
# Pclass, Sex, Has_Cabin gibi kategorik/ikili sütunları hariç tutuyoruz.
continuous_cols = ['Age', 'SibSp', 'Parch', 'Fare']

plt.figure(figsize=(15, 5))
plt.suptitle("Sürekli Sayısal Sütunlar İçin Kutu Grafikleri", fontsize=16)

for i, col in enumerate(continuous_cols):
    plt.subplot(1, 4, i + 1)
    sns.boxplot(y=X[col])
    plt.title(col)
    plt.ylabel('')

plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.show()

print("\nGrafiklerdeki kutuların dışında kalan noktalar aykırı değerleri göstermektedir.")
print("Özellikle 'Fare' sütununda belirgin aykırı değerler olduğu görülüyor.")
print("-" * 50)

print("\nİstatistiksel Yöntem: IQR Skoru ile aykırı değerlerin tespiti...")

def find_outliers_iqr(data, column_name):
    """
    Bir DataFrame sütunundaki aykırı değerleri IQR yöntemine göre bulan fonksiyon.
    """
    Q1 = data[column_name].quantile(0.25)
    Q3 = data[column_name].quantile(0.75)
    IQR = Q3 - Q1

    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Alt ve üst sınırların dışında kalan değerleri filtrele
    outliers = data[(data[column_name] < lower_bound) | (data[column_name] > upper_bound)]

    print(f"\n'{column_name}' Sütunu İçin IQR Analizi:")
    print(f"Alt Sınır: {lower_bound:.2f}")
    print(f"Üst Sınır: {upper_bound:.2f}")
    print(f"Tespit Edilen Aykırı Değer Sayısı: {len(outliers)}")

    if not outliers.empty:
        print(f"Aykırı Değerlerin Değerleri (ilk 5): {outliers[column_name].head().values}")

    return outliers

# 'Age' sütunu için aykırı değerleri bulalım
outliers_age = find_outliers_iqr(X, 'Age')

# 'Fare' sütunu için aykırı değerleri bulalım (en çok aykırı değer burada bekleniyor)
outliers_fare = find_outliers_iqr(X, 'Fare')
print("-" * 50)

outliers_fare = find_outliers_iqr(X, 'SibSp')
print("-" * 50)

# --- ADIM 5: MODELLERİ KURMA, EĞİTME VE DEĞERLENDİRME ---

# Import necessary libraries
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Karşılaştırmak için iki model tanımlayalım
models = {
    "Lojistik Regresyon": LogisticRegression(max_iter=1000, random_state=42),
    "Rastgele Orman": RandomForestClassifier(n_estimators=100, random_state=42)
}

for name, model in models.items():
    print(f"\n========== {name} Modeli ==========")

    # Modeli ölçeklendirilmiş eğitim verileriyle eğitme
    print("Model eğitiliyor...")
    model.fit(X_train_scaled, y_train)

    # Ölçeklendirilmiş test seti üzerinde tahmin yapma
    print("Tahminler yapılıyor...")
    y_pred = model.predict(X_test_scaled)

    # Değerlendirme metriklerini hesaplama
    accuracy = accuracy_score(y_test, y_pred)
    print(f"\nDoğruluk (Accuracy): {accuracy:.4f}")

    # Karmaşıklık Matrisi (Confusion Matrix)
    print("\nKarmaşıklık Matrisi:")
    cm = confusion_matrix(y_test, y_pred)

    # Matrisi görselleştirelim
    plt.figure(figsize=(6, 4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
                xticklabels=['Hayatta Kalamadı (0)', 'Hayatta Kaldı (1)'],
                yticklabels=['Hayatta Kalamadı (0)', 'Hayatta Kaldı (1)'])
    plt.xlabel('Tahmin Edilen Sınıf')
    plt.ylabel('Gerçek Sınıf')
    plt.title(f'{name} - Karmaşıklık Matrisi')
    plt.show()

    # Sınıflandırma Raporu (Precision, Recall, F1-Score)
    print("\nSınıflandırma Raporu:")
    print(classification_report(y_test, y_pred, target_names=['Hayatta Kalamadı (0)', 'Hayatta Kaldı (1)']))
    print("-" * 50)