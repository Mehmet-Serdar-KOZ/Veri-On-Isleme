# -*- coding: utf-8 -*-
"""Veri Ön İşleme.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PBASmp0fkNzFhW4GWvlbTiwqZ_QrQ3Jh
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('ClaMP_Integrated-5184.csv')

print("Verinin ilk 5 satırı:")
print(df.head())
print("\n" + "-" * 30)

df.info()
print("\n" + "-" * 30)

print("Her sütundaki eksik değer sayısı:")
print(df.isnull().sum())
print("\n" + "-" * 30)

print("Kategorik 'packer_type' sütunu One-Hot Encoding ile dönüştürülüyor...")
df_processed = pd.get_dummies(df, columns=['packer_type'], prefix='packer', drop_first=True)

print("Dönüşüm sonrası veri setinin ilk 5 satırı:")
print(df_processed.head())
print("\n" + "-" * 30)

print("Bağımlı (y) ve bağımsız (X) değişkenler ayrılıyor...")
X = df_processed.drop('class', axis=1)
y = df_processed['class']

print(f"Özellik (X) matrisinin boyutu: {X.shape}")
print(f"Hedef (y) vektörünün boyutu: {y.shape}")
print("\n" + "-" * 30)

print("Sayısal özellikler ölçeklendiriliyor...")
features_to_scale = [col for col in X.columns if not col.startswith('packer_')]
scaler = StandardScaler()
X[features_to_scale] = scaler.fit_transform(X[features_to_scale])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
print("Veri setlerinin boyutları:")
print(f"X_train boyutu: {X_train.shape}")
print(f"X_test boyutu:  {X_test.shape}")
print(f"y_train boyutu: {y_train.shape}")
print(f"y_test boyutu:  {y_test.shape}")
print("\n" + "-" * 30)
print("Veri ön işleme tamamlandı! Veri artık model eğitimine hazır.")

# Her sınıftan kaçar tane olduğunu sayar
print(df['class'].value_counts())

# Her sınıfın yüzdelik oranını gösterir
print(df['class'].value_counts(normalize=True))

numerical_cols = df.select_dtypes(include=np.number).columns.tolist()
# 'class' hedef sütun olduğu için onu çıkaralım
if 'class' in numerical_cols:
    numerical_cols.remove('class')

print(f"\nAykırı değer tespiti için incelenecek sayısal sütunlar: {numerical_cols}")
print("-" * 50)

# --- 2. Görsel Yöntemle Aykırı Değer Tespiti (Box Plot) ---
print("Görsel Yöntem: Box Plot ile aykırı değerlerin tespiti yapılıyor...")

# Örnek olarak ilk birkaç sayısal sütun için kutu grafiği çizdirelim
# Grafiğin daha okunaklı olması için subplot'lar kullanalım
plt.figure(figsize=(15, 10))
plt.suptitle("Sayısal Sütunlar İçin Kutu Grafikleri (Box Plots)", fontsize=16)

# Örnek olarak ilk 6 sayısal sütunu alalım
for i, col in enumerate(numerical_cols[:6]):
    plt.subplot(2, 3, i + 1)
    sns.boxplot(y=df[col])
    plt.title(col)
    plt.ylabel('')

plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.show()

print("\nGrafiklerdeki kutuların dışında kalan noktalar aykırı değerleri göstermektedir.")
print("-" * 50)

# --- 3. İstatistiksel Yöntemle Aykırı Değer Tespiti (IQR Metodu) ---
print("İstatistiksel Yöntem: IQR Skoru ile aykırı değerlerin tespiti...")

def find_outliers_iqr(data, column_name):
    """
    Bir DataFrame sütunundaki aykırı değerleri IQR yöntemine göre bulan fonksiyon.
    """
    Q1 = data[column_name].quantile(0.25)
    Q3 = data[column_name].quantile(0.75)
    IQR = Q3 - Q1

    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Alt ve üst sınırların dışında kalan değerleri filtrele
    outliers = data[(data[column_name] < lower_bound) | (data[column_name] > upper_bound)]

    print(f"\n'{column_name}' Sütunu İçin IQR Analizi:")
    print(f"Q1: {Q1:.2f}, Q3: {Q3:.2f}, IQR: {IQR:.2f}")
    print(f"Aykırı Değer Alt Sınırı: {lower_bound:.2f}")
    print(f"Aykırı Değer Üst Sınırı: {upper_bound:.2f}")
    print(f"Tespit Edilen Aykırı Değer Sayısı: {len(outliers)}")

    if not outliers.empty:
        # Sadece ilgili sütun ve aykırı değerleri gösterelim
        print("İlk 5 Aykırı Değer:")
        print(outliers[[column_name]].head())

    return outliers

# 'SizeOfCode' sütunu için aykırı değerleri bulalım
outliers_size_of_code = find_outliers_iqr(df, 'SizeOfCode')

# 'SizeOfInitializedData' sütunu için aykırı değerleri bulalım
outliers_size_of_init_data = find_outliers_iqr(df, 'SizeOfInitializedData')
print("-" * 50)

# --- 4. Alternatif İstatistiksel Yöntem (Z-Skoru) ---
print("Alternatif İstatistiksel Yöntem: Z-Skoru ile aykırı değerlerin tespiti...")

def find_outliers_zscore(data, column_name, threshold=3):
    """
    Bir DataFrame sütunundaki aykırı değerleri Z-Skoru yöntemine göre bulan fonksiyon.
    """
    mean = np.mean(data[column_name])
    std = np.std(data[column_name])

    outliers = []
    for val in data[column_name]:
        z_score = (val - mean) / std
        if np.abs(z_score) > threshold:
            outliers.append(val)

    print(f"\n'{column_name}' Sütunu İçin Z-Skoru Analizi (Eşik Değeri={threshold}):")
    print(f"Ortalama: {mean:.2f}, Standart Sapma: {std:.2f}")
    print(f"Tespit Edilen Aykırı Değer Sayısı: {len(outliers)}")

    if outliers:
        print(f"İlk 5 Aykırı Değer: {outliers[:5]}")

    return outliers

# 'SizeOfCode' sütunu için Z-skoru ile aykırı değerleri bulalım
z_outliers_size_of_code = find_outliers_zscore(df, 'SizeOfCode')

# Her sınıftan kaçar tane olduğunu sayar
print(df['class'].value_counts())

# Her sınıfın yüzdelik oranını gösterir
print(df['class'].value_counts(normalize=True))