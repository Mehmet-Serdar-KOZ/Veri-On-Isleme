# -*- coding: utf-8 -*-
"""Veri Ön İşleme 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WMPfNWVV1-pN4wSO-wBPPdmIBO7QkxhY
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('train.csv')

print("Verinin ilk 5 satırı:")
print(df.head())
print("\n" + "-" * 30)

df.info()
print("\n" + "-" * 30)

print("Her sütundaki eksik değer sayısı:")
print(df.isnull().sum())
print("\n" + "-" * 30)

# --- ADIM 1: EKSİK KATEGORİK DEĞERLERİ DOLDURMA ---
# Bu veri setinde birçok 'NaN' değeri aslında "yok" anlamına gelir (örn: Havuz Yok, Garaj Yok).
# Bu yüzden bunları 'None' veya 'NA' gibi bir metinle doldurmak, bilgiyi korumamızı sağlar.

print("Eksik kategorik değerler 'None' veya 'NA' ile dolduruluyor...")
# Çok sayıda eksik değeri olan ve NaN'ın "yok" anlamına geldiği sütunlar
for col in ['Alley', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PoolQC', 'Fence', 'MiscFeature', 'MasVnrType']:
    df[col] = df[col].fillna('None')

# Az sayıda eksik değeri olan ve en sık tekrar edenle doldurabileceğimiz sütunlar
# (Bu örnekte basitlik için onları da 'None' ile doldurabiliriz veya daha gelişmiş yöntemler kullanabiliriz)
df['Electrical'] = df['Electrical'].fillna(df['Electrical'].mode()[0])
print("Eksik değer doldurma tamamlandı.")
print("-" * 60)

# --- ADIM 2: SIRALI (ORDINAL) KATEGORİK VERİLERİ DÖNÜŞTÜRME ---
# Kategoriler arasında bir hiyerarşi olan sütunları, bu hiyerarşiyi koruyarak sayılara çeviriyoruz.

print("Sıralı (Ordinal) kategorik veriler sayısala dönüştürülüyor...")

# Kalite ve durum belirten sütunlar için genel bir haritalama
quality_map = {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}
df['ExterQual'] = df['ExterQual'].map(quality_map).astype(int)
df['ExterCond'] = df['ExterCond'].map(quality_map).astype(int)
df['BsmtQual'] = df['BsmtQual'].map(quality_map).astype(int)
df['BsmtCond'] = df['BsmtCond'].map(quality_map).astype(int)
df['HeatingQC'] = df['HeatingQC'].map(quality_map).astype(int)
df['KitchenQual'] = df['KitchenQual'].map(quality_map).astype(int)
df['FireplaceQu'] = df['FireplaceQu'].map(quality_map).astype(int)
df['GarageQual'] = df['GarageQual'].map(quality_map).astype(int)
df['GarageCond'] = df['GarageCond'].map(quality_map).astype(int)
df['PoolQC'] = df['PoolQC'].map(quality_map).astype(int)

# Diğer sıralı sütunlar için özel haritalamalar
df['BsmtExposure'] = df['BsmtExposure'].map({'None': 0, 'No': 1, 'Mn': 2, 'Av': 3, 'Gd': 4}).astype(int)
df['BsmtFinType1'] = df['BsmtFinType1'].map({'None': 0, 'Unf': 1, 'LwQ': 2, 'Rec': 3, 'BLQ': 4, 'ALQ': 5, 'GLQ': 6}).astype(int)
df['BsmtFinType2'] = df['BsmtFinType2'].map({'None': 0, 'Unf': 1, 'LwQ': 2, 'Rec': 3, 'BLQ': 4, 'ALQ': 5, 'GLQ': 6}).astype(int)
df['GarageFinish'] = df['GarageFinish'].map({'None': 0, 'Unf': 1, 'RFn': 2, 'Fin': 3}).astype(int)
df['Fence'] = df['Fence'].map({'None': 0, 'MnWw': 1, 'GdWo': 2, 'MnPrv': 3, 'GdPrv': 4}).astype(int)
df['LandSlope'] = df['LandSlope'].map({'Sev': 0, 'Mod': 1, 'Gtl': 2}).astype(int)

print("Sıralı veri dönüşümü tamamlandı.")
print("-" * 60)

# --- ADIM 3: SIRASIZ (NOMINAL) KATEGORİK VERİLERİ DÖNÜŞTÜRME ---
# Geriye kalan tüm 'object' tipli sütunları One-Hot Encoding ile dönüştürüyoruz.
# Bu işlem, her kategori için yeni bir sütun oluşturur ve orijinalini kaldırır.

print("Sırasız (Nominal) kategorik veriler One-Hot Encoding ile dönüştürülüyor...")

# Önce object tipindeki tüm sütunları bulalım
object_cols = df.select_dtypes(include='object').columns

# One-Hot Encoding uygula
df = pd.get_dummies(df, columns=object_cols, drop_first=True)

print("Sırasız veri dönüşümü tamamlandı.")
print("-" * 60)

# --- SON KONTROL ---
print("\nKATEGORİK VERİ DÖNÜŞÜMÜ TAMAMLANDI!")
print("Veri setinin son hali (ilk 5 satır):")
# Çok fazla sütun olduğu için sadece ilk 5 satır ve 10 sütunu gösterelim
print(df.iloc[:5, :10])

print("\nİşlem Sonrası Veri Tipleri Kontrolü:")
# 'object' tipinde sütun kalıp kalmadığını kontrol edelim
object_cols_after = df.select_dtypes(include='object').columns
if len(object_cols_after) == 0:
    print("Başarılı! Veri setinde 'object' tipinde sütun kalmadı.")
    print(f"Toplam sütun sayısı: {df.shape[1]}")
else:
    print(f"HATA: Hala 'object' tipinde sütunlar var: {object_cols_after.tolist()}")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler

# Veri setini yükleyelim
try:
    df = pd.read_csv('train.csv')
    print("House Prices veri seti (train.csv) başarıyla yüklendi.")
except FileNotFoundError:
    print("HATA: train.csv dosyası bulunamadı. Lütfen Kaggle'dan indirip kodla aynı klasöre koyun.")
    exit()

print("-" * 60)
# --- ADIM 1: EKSİK KATEGORİK DEĞERLERİ DOLDURMA ---
print("Eksik kategorik değerler 'None' veya en sık tekrar eden değer ile dolduruluyor...")
for col in ['Alley', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PoolQC', 'Fence', 'MiscFeature', 'MasVnrType']:
    df[col] = df[col].fillna('None')
df['Electrical'] = df['Electrical'].fillna(df['Electrical'].mode()[0])
print("Eksik kategorik değer doldurma tamamlandı.")
print("-" * 60)

# --- ADIM 2: EKSİK SAYISAL DEĞERLERİ DOLDURMA ---
print("Eksik sayısal değerler medyan ile dolduruluyor...")
# LotFrontage: Medyan ile doldurmak aykırı değerlere karşı daha dayanıklıdır.
df['LotFrontage'] = df['LotFrontage'].fillna(df['LotFrontage'].median())
# MasVnrArea: Medyan ile doldurma
df['MasVnrArea'] = df['MasVnrArea'].fillna(df['MasVnrArea'].median())
# GarageYrBlt: Medyan ile doldurma
df['GarageYrBlt'] = df['GarageYrBlt'].fillna(df['GarageYrBlt'].median())
print("Eksik sayısal değerler dolduruldu.")
print("-" * 60)

# --- ADIM 3: KATEGORİK VERİLERİ SAYISALA DÖNÜŞTÜRME ---
print("Kategorik veriler sayısala dönüştürülüyor...")
# Sıralı (Ordinal) Dönüşüm
quality_map = {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}
ordinal_cols = ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'HeatingQC', 'KitchenQual', 'FireplaceQu', 'GarageQual', 'GarageCond', 'PoolQC']
for col in ordinal_cols:
    df[col] = df[col].map(quality_map).astype(int)

df['BsmtExposure'] = df['BsmtExposure'].map({'None': 0, 'No': 1, 'Mn': 2, 'Av': 3, 'Gd': 4}).astype(int)
df['BsmtFinType1'] = df['BsmtFinType1'].map({'None': 0, 'Unf': 1, 'LwQ': 2, 'Rec': 3, 'BLQ': 4, 'ALQ': 5, 'GLQ': 6}).astype(int)
df['BsmtFinType2'] = df['BsmtFinType2'].map({'None': 0, 'Unf': 1, 'LwQ': 2, 'Rec': 3, 'BLQ': 4, 'ALQ': 5, 'GLQ': 6}).astype(int)
df['GarageFinish'] = df['GarageFinish'].map({'None': 0, 'Unf': 1, 'RFn': 2, 'Fin': 3}).astype(int)
df['Fence'] = df['Fence'].map({'None': 0, 'MnWw': 1, 'GdWo': 2, 'MnPrv': 3, 'GdPrv': 4}).astype(int)
df['LandSlope'] = df['LandSlope'].map({'Sev': 0, 'Mod': 1, 'Gtl': 2}).astype(int)

# Sırasız (Nominal) Dönüşüm
object_cols = df.select_dtypes(include='object').columns
df = pd.get_dummies(df, columns=object_cols, drop_first=True)
print("Kategorik veri dönüşümü tamamlandı.")
print("-" * 60)

# --- ADIM 4: AYKIRI DEĞER ANALİZİ (GÖRSELLEŞTİRME) ---
print("Aykırı değer analizi için bazı önemli sütunlar görselleştiriliyor...")
plt.figure(figsize=(15, 6))
plt.subplot(1, 3, 1)
sns.boxplot(y=df['GrLivArea'])
plt.title('GrLivArea (Yaşam Alanı)')
plt.subplot(1, 3, 2)
sns.boxplot(y=df['LotArea'])
plt.title('LotArea (Arsa Alanı)')
plt.subplot(1, 3, 3)
sns.boxplot(y=df['SalePrice'])
plt.title('SalePrice (Satış Fiyatı)')
plt.tight_layout()
plt.show()
print("Grafikler, özellikle yaşam alanı ve satış fiyatında aykırı değerler olduğunu gösteriyor.")
print("Bu aşamada bu değerlere müdahale etmiyoruz, ancak varlıklarından haberdarız.")
print("-" * 60)

# --- ADIM 5: ÖZELLİK ÖLÇEKLENDİRME (FEATURE SCALING) ---
print("Tüm özellikler ölçeklendiriliyor...")
# Hedef değişkeni (SalePrice) ve Id'yi ölçeklendirme dışı bırakıyoruz.
# Id, bir özellik değil, sadece bir kimlik numarasıdır.
target = df['SalePrice']
features = df.drop(['SalePrice', 'Id'], axis=1)

# Scaler nesnesini oluşturup tüm özellikleri ölçeklendiriyoruz.
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# Ölçeklenmiş veriyi, sütun isimlerini koruyarak yeni bir DataFrame'e dönüştürelim.
df_scaled = pd.DataFrame(scaled_features, columns=features.columns)

# Hedef değişkeni ve Id'yi tekrar bu yeni DataFrame'e ekleyelim.
df_scaled['Id'] = df['Id']
df_scaled['SalePrice'] = target.values

print("Tüm özellikler başarıyla ölçeklendirildi.")
print("-" * 60)

# --- SON KONTROL ---
print("\nTÜM VERİ ÖN İŞLEME ADIMLARI TAMAMLANDI!")
print("İşlenmiş ve ölçeklendirilmiş verinin son hali (ilk 5 satır):")
# Çok fazla sütun olduğu için sadece ilk 5 satır ve bazı önemli sütunları gösterelim
print(df_scaled[['LotFrontage', 'OverallQual', 'GrLivArea', 'GarageCars', 'SalePrice']].head())

print(f"\nVeri setinin son boyutu: {df_scaled.shape[0]} satır, {df_scaled.shape[1]} sütun")
# Eksik değer kalıp kalmadığını son bir kez kontrol edelim
print(f"Kalan toplam eksik değer sayısı: {df_scaled.isnull().sum().sum()}")